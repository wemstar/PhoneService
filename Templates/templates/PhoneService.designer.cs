#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Templates.templates
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Telephone_Service")]
	public partial class PhoneServiceDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertClient(Client instance);
    partial void UpdateClient(Client instance);
    partial void DeleteClient(Client instance);
    partial void InsertIssiue(Issiue instance);
    partial void UpdateIssiue(Issiue instance);
    partial void DeleteIssiue(Issiue instance);
    partial void InsertIssiue_History(Issiue_History instance);
    partial void UpdateIssiue_History(Issiue_History instance);
    partial void DeleteIssiue_History(Issiue_History instance);
    partial void InsertPhone(Phone instance);
    partial void UpdatePhone(Phone instance);
    partial void DeletePhone(Phone instance);
    partial void InsertPhone_Model(Phone_Model instance);
    partial void UpdatePhone_Model(Phone_Model instance);
    partial void DeletePhone_Model(Phone_Model instance);
    #endregion
		
		public PhoneServiceDataContext() : 
				base(global::Templates.Properties.Settings.Default.Telephone_ServiceConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PhoneServiceDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PhoneServiceDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PhoneServiceDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PhoneServiceDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Client> Clients
		{
			get
			{
				return this.GetTable<Client>();
			}
		}
		
		public System.Data.Linq.Table<Issiue> Issiues
		{
			get
			{
				return this.GetTable<Issiue>();
			}
		}
		
		public System.Data.Linq.Table<Issiue_History> Issiue_Histories
		{
			get
			{
				return this.GetTable<Issiue_History>();
			}
		}
		
		public System.Data.Linq.Table<Phone> Phones
		{
			get
			{
				return this.GetTable<Phone>();
			}
		}
		
		public System.Data.Linq.Table<Phone_Model> Phone_Models
		{
			get
			{
				return this.GetTable<Phone_Model>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Client")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Client_ID;
		
		private string _Client_Name;
		
		private string _Client_Surname;
		
		private string _Client_Telephone;
		
		private string _Client_Adress;
		
		private EntitySet<Issiue> _Issiues;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClient_IDChanging(int value);
    partial void OnClient_IDChanged();
    partial void OnClient_NameChanging(string value);
    partial void OnClient_NameChanged();
    partial void OnClient_SurnameChanging(string value);
    partial void OnClient_SurnameChanged();
    partial void OnClient_TelephoneChanging(string value);
    partial void OnClient_TelephoneChanged();
    partial void OnClient_AdressChanging(string value);
    partial void OnClient_AdressChanged();
    #endregion
		
		public Client()
		{
			this._Issiues = new EntitySet<Issiue>(new Action<Issiue>(this.attach_Issiues), new Action<Issiue>(this.detach_Issiues));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Client_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Client_ID
		{
			get
			{
				return this._Client_ID;
			}
			set
			{
				if ((this._Client_ID != value))
				{
					this.OnClient_IDChanging(value);
					this.SendPropertyChanging();
					this._Client_ID = value;
					this.SendPropertyChanged("Client_ID");
					this.OnClient_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Client_Name", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string Client_Name
		{
			get
			{
				return this._Client_Name;
			}
			set
			{
				if ((this._Client_Name != value))
				{
					this.OnClient_NameChanging(value);
					this.SendPropertyChanging();
					this._Client_Name = value;
					this.SendPropertyChanged("Client_Name");
					this.OnClient_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Client_Surname", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string Client_Surname
		{
			get
			{
				return this._Client_Surname;
			}
			set
			{
				if ((this._Client_Surname != value))
				{
					this.OnClient_SurnameChanging(value);
					this.SendPropertyChanging();
					this._Client_Surname = value;
					this.SendPropertyChanged("Client_Surname");
					this.OnClient_SurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Client_Telephone", DbType="NChar(15) NOT NULL", CanBeNull=false)]
		public string Client_Telephone
		{
			get
			{
				return this._Client_Telephone;
			}
			set
			{
				if ((this._Client_Telephone != value))
				{
					this.OnClient_TelephoneChanging(value);
					this.SendPropertyChanging();
					this._Client_Telephone = value;
					this.SendPropertyChanged("Client_Telephone");
					this.OnClient_TelephoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Client_Adress", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Client_Adress
		{
			get
			{
				return this._Client_Adress;
			}
			set
			{
				if ((this._Client_Adress != value))
				{
					this.OnClient_AdressChanging(value);
					this.SendPropertyChanging();
					this._Client_Adress = value;
					this.SendPropertyChanged("Client_Adress");
					this.OnClient_AdressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Issiue", Storage="_Issiues", ThisKey="Client_ID", OtherKey="Issiue_Client_ID")]
		public EntitySet<Issiue> Issiues
		{
			get
			{
				return this._Issiues;
			}
			set
			{
				this._Issiues.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Issiues(Issiue entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_Issiues(Issiue entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Issiue")]
	public partial class Issiue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Issiue_ID;
		
		private int _Issiue_Client_ID;
		
		private int _Issiue_Phone_ID;
		
		private int _Priority;
		
		private EntitySet<Issiue_History> _Issiue_Histories;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<Phone> _Phone;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIssiue_IDChanging(int value);
    partial void OnIssiue_IDChanged();
    partial void OnIssiue_Client_IDChanging(int value);
    partial void OnIssiue_Client_IDChanged();
    partial void OnIssiue_Phone_IDChanging(int value);
    partial void OnIssiue_Phone_IDChanged();
    partial void OnPriorityChanging(int value);
    partial void OnPriorityChanged();
    #endregion
		
		public Issiue()
		{
			this._Issiue_Histories = new EntitySet<Issiue_History>(new Action<Issiue_History>(this.attach_Issiue_Histories), new Action<Issiue_History>(this.detach_Issiue_Histories));
			this._Client = default(EntityRef<Client>);
			this._Phone = default(EntityRef<Phone>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Issiue_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Issiue_ID
		{
			get
			{
				return this._Issiue_ID;
			}
			set
			{
				if ((this._Issiue_ID != value))
				{
					this.OnIssiue_IDChanging(value);
					this.SendPropertyChanging();
					this._Issiue_ID = value;
					this.SendPropertyChanged("Issiue_ID");
					this.OnIssiue_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Issiue_Client_ID", DbType="Int NOT NULL")]
		public int Issiue_Client_ID
		{
			get
			{
				return this._Issiue_Client_ID;
			}
			set
			{
				if ((this._Issiue_Client_ID != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIssiue_Client_IDChanging(value);
					this.SendPropertyChanging();
					this._Issiue_Client_ID = value;
					this.SendPropertyChanged("Issiue_Client_ID");
					this.OnIssiue_Client_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Issiue_Phone_ID", DbType="Int NOT NULL")]
		public int Issiue_Phone_ID
		{
			get
			{
				return this._Issiue_Phone_ID;
			}
			set
			{
				if ((this._Issiue_Phone_ID != value))
				{
					if (this._Phone.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIssiue_Phone_IDChanging(value);
					this.SendPropertyChanging();
					this._Issiue_Phone_ID = value;
					this.SendPropertyChanged("Issiue_Phone_ID");
					this.OnIssiue_Phone_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Priority", DbType="Int NOT NULL")]
		public int Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this.OnPriorityChanging(value);
					this.SendPropertyChanging();
					this._Priority = value;
					this.SendPropertyChanged("Priority");
					this.OnPriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issiue_Issiue_History", Storage="_Issiue_Histories", ThisKey="Issiue_ID", OtherKey="History_Issiue_ID")]
		public EntitySet<Issiue_History> Issiue_Histories
		{
			get
			{
				return this._Issiue_Histories;
			}
			set
			{
				this._Issiue_Histories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Issiue", Storage="_Client", ThisKey="Issiue_Client_ID", OtherKey="Client_ID", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.Issiues.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.Issiues.Add(this);
						this._Issiue_Client_ID = value.Client_ID;
					}
					else
					{
						this._Issiue_Client_ID = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Phone_Issiue", Storage="_Phone", ThisKey="Issiue_Phone_ID", OtherKey="Phone_ID", IsForeignKey=true)]
		public Phone Phone
		{
			get
			{
				return this._Phone.Entity;
			}
			set
			{
				Phone previousValue = this._Phone.Entity;
				if (((previousValue != value) 
							|| (this._Phone.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Phone.Entity = null;
						previousValue.Issiues.Remove(this);
					}
					this._Phone.Entity = value;
					if ((value != null))
					{
						value.Issiues.Add(this);
						this._Issiue_Phone_ID = value.Phone_ID;
					}
					else
					{
						this._Issiue_Phone_ID = default(int);
					}
					this.SendPropertyChanged("Phone");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Issiue_Histories(Issiue_History entity)
		{
			this.SendPropertyChanging();
			entity.Issiue = this;
		}
		
		private void detach_Issiue_Histories(Issiue_History entity)
		{
			this.SendPropertyChanging();
			entity.Issiue = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Issiue_History")]
	public partial class Issiue_History : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _History_ID;
		
		private int _History_Issiue_ID;
		
		private string _History_From_Status;
		
		private string _History_To_Status;
		
		private System.DateTime _History_Date;
		
		private string _History_Comment;
		
		private EntityRef<Issiue> _Issiue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHistory_IDChanging(int value);
    partial void OnHistory_IDChanged();
    partial void OnHistory_Issiue_IDChanging(int value);
    partial void OnHistory_Issiue_IDChanged();
    partial void OnHistory_From_StatusChanging(string value);
    partial void OnHistory_From_StatusChanged();
    partial void OnHistory_To_StatusChanging(string value);
    partial void OnHistory_To_StatusChanged();
    partial void OnHistory_DateChanging(System.DateTime value);
    partial void OnHistory_DateChanged();
    partial void OnHistory_CommentChanging(string value);
    partial void OnHistory_CommentChanged();
    #endregion
		
		public Issiue_History()
		{
			this._Issiue = default(EntityRef<Issiue>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_History_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int History_ID
		{
			get
			{
				return this._History_ID;
			}
			set
			{
				if ((this._History_ID != value))
				{
					this.OnHistory_IDChanging(value);
					this.SendPropertyChanging();
					this._History_ID = value;
					this.SendPropertyChanged("History_ID");
					this.OnHistory_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_History_Issiue_ID", DbType="Int NOT NULL")]
		public int History_Issiue_ID
		{
			get
			{
				return this._History_Issiue_ID;
			}
			set
			{
				if ((this._History_Issiue_ID != value))
				{
					if (this._Issiue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHistory_Issiue_IDChanging(value);
					this.SendPropertyChanging();
					this._History_Issiue_ID = value;
					this.SendPropertyChanged("History_Issiue_ID");
					this.OnHistory_Issiue_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_History_From_Status", DbType="NChar(10)")]
		public string History_From_Status
		{
			get
			{
				return this._History_From_Status;
			}
			set
			{
				if ((this._History_From_Status != value))
				{
					this.OnHistory_From_StatusChanging(value);
					this.SendPropertyChanging();
					this._History_From_Status = value;
					this.SendPropertyChanged("History_From_Status");
					this.OnHistory_From_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_History_To_Status", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string History_To_Status
		{
			get
			{
				return this._History_To_Status;
			}
			set
			{
				if ((this._History_To_Status != value))
				{
					this.OnHistory_To_StatusChanging(value);
					this.SendPropertyChanging();
					this._History_To_Status = value;
					this.SendPropertyChanged("History_To_Status");
					this.OnHistory_To_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_History_Date", DbType="DateTime NOT NULL")]
		public System.DateTime History_Date
		{
			get
			{
				return this._History_Date;
			}
			set
			{
				if ((this._History_Date != value))
				{
					this.OnHistory_DateChanging(value);
					this.SendPropertyChanging();
					this._History_Date = value;
					this.SendPropertyChanged("History_Date");
					this.OnHistory_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_History_Comment", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string History_Comment
		{
			get
			{
				return this._History_Comment;
			}
			set
			{
				if ((this._History_Comment != value))
				{
					this.OnHistory_CommentChanging(value);
					this.SendPropertyChanging();
					this._History_Comment = value;
					this.SendPropertyChanged("History_Comment");
					this.OnHistory_CommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issiue_Issiue_History", Storage="_Issiue", ThisKey="History_Issiue_ID", OtherKey="Issiue_ID", IsForeignKey=true)]
		public Issiue Issiue
		{
			get
			{
				return this._Issiue.Entity;
			}
			set
			{
				Issiue previousValue = this._Issiue.Entity;
				if (((previousValue != value) 
							|| (this._Issiue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Issiue.Entity = null;
						previousValue.Issiue_Histories.Remove(this);
					}
					this._Issiue.Entity = value;
					if ((value != null))
					{
						value.Issiue_Histories.Add(this);
						this._History_Issiue_ID = value.Issiue_ID;
					}
					else
					{
						this._History_Issiue_ID = default(int);
					}
					this.SendPropertyChanged("Issiue");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Phone")]
	public partial class Phone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Phone_ID;
		
		private int _Phone_Model_ID;
		
		private string _Color;
		
		private int _State;
		
		private EntitySet<Issiue> _Issiues;
		
		private EntityRef<Phone_Model> _Phone_Model;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhone_IDChanging(int value);
    partial void OnPhone_IDChanged();
    partial void OnPhone_Model_IDChanging(int value);
    partial void OnPhone_Model_IDChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    partial void OnStateChanging(int value);
    partial void OnStateChanged();
    #endregion
		
		public Phone()
		{
			this._Issiues = new EntitySet<Issiue>(new Action<Issiue>(this.attach_Issiues), new Action<Issiue>(this.detach_Issiues));
			this._Phone_Model = default(EntityRef<Phone_Model>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Phone_ID
		{
			get
			{
				return this._Phone_ID;
			}
			set
			{
				if ((this._Phone_ID != value))
				{
					this.OnPhone_IDChanging(value);
					this.SendPropertyChanging();
					this._Phone_ID = value;
					this.SendPropertyChanged("Phone_ID");
					this.OnPhone_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone_Model_ID", DbType="Int NOT NULL")]
		public int Phone_Model_ID
		{
			get
			{
				return this._Phone_Model_ID;
			}
			set
			{
				if ((this._Phone_Model_ID != value))
				{
					if (this._Phone_Model.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhone_Model_IDChanging(value);
					this.SendPropertyChanging();
					this._Phone_Model_ID = value;
					this.SendPropertyChanged("Phone_Model_ID");
					this.OnPhone_Model_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Color", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="Int NOT NULL")]
		public int State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Phone_Issiue", Storage="_Issiues", ThisKey="Phone_ID", OtherKey="Issiue_Phone_ID")]
		public EntitySet<Issiue> Issiues
		{
			get
			{
				return this._Issiues;
			}
			set
			{
				this._Issiues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Phone_Model_Phone", Storage="_Phone_Model", ThisKey="Phone_Model_ID", OtherKey="Model_ID", IsForeignKey=true)]
		public Phone_Model Phone_Model
		{
			get
			{
				return this._Phone_Model.Entity;
			}
			set
			{
				Phone_Model previousValue = this._Phone_Model.Entity;
				if (((previousValue != value) 
							|| (this._Phone_Model.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Phone_Model.Entity = null;
						previousValue.Phones.Remove(this);
					}
					this._Phone_Model.Entity = value;
					if ((value != null))
					{
						value.Phones.Add(this);
						this._Phone_Model_ID = value.Model_ID;
					}
					else
					{
						this._Phone_Model_ID = default(int);
					}
					this.SendPropertyChanged("Phone_Model");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Issiues(Issiue entity)
		{
			this.SendPropertyChanging();
			entity.Phone = this;
		}
		
		private void detach_Issiues(Issiue entity)
		{
			this.SendPropertyChanging();
			entity.Phone = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Phone_Model")]
	public partial class Phone_Model : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Model_ID;
		
		private System.Xml.Linq.XElement _Model_Parts;
		
		private string _Name;
		
		private string _Producer;
		
		private EntitySet<Phone> _Phones;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnModel_IDChanging(int value);
    partial void OnModel_IDChanged();
    partial void OnModel_PartsChanging(System.Xml.Linq.XElement value);
    partial void OnModel_PartsChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnProducerChanging(string value);
    partial void OnProducerChanged();
    #endregion
		
		public Phone_Model()
		{
			this._Phones = new EntitySet<Phone>(new Action<Phone>(this.attach_Phones), new Action<Phone>(this.detach_Phones));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Model_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Model_ID
		{
			get
			{
				return this._Model_ID;
			}
			set
			{
				if ((this._Model_ID != value))
				{
					this.OnModel_IDChanging(value);
					this.SendPropertyChanging();
					this._Model_ID = value;
					this.SendPropertyChanged("Model_ID");
					this.OnModel_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Model_Parts", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement Model_Parts
		{
			get
			{
				return this._Model_Parts;
			}
			set
			{
				if ((this._Model_Parts != value))
				{
					this.OnModel_PartsChanging(value);
					this.SendPropertyChanging();
					this._Model_Parts = value;
					this.SendPropertyChanged("Model_Parts");
					this.OnModel_PartsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(30) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Producer", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string Producer
		{
			get
			{
				return this._Producer;
			}
			set
			{
				if ((this._Producer != value))
				{
					this.OnProducerChanging(value);
					this.SendPropertyChanging();
					this._Producer = value;
					this.SendPropertyChanged("Producer");
					this.OnProducerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Phone_Model_Phone", Storage="_Phones", ThisKey="Model_ID", OtherKey="Phone_Model_ID")]
		public EntitySet<Phone> Phones
		{
			get
			{
				return this._Phones;
			}
			set
			{
				this._Phones.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Phones(Phone entity)
		{
			this.SendPropertyChanging();
			entity.Phone_Model = this;
		}
		
		private void detach_Phones(Phone entity)
		{
			this.SendPropertyChanging();
			entity.Phone_Model = null;
		}
	}
}
#pragma warning restore 1591
